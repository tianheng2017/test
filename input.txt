有各种不同的销售方案被用来以卖家获得最高利润的方式出售商品。英式拍卖，用于在澳大利亚售卖房地产，可能是最为人熟悉的：竞拍者轮流报出越来越高的价格，直到只剩下一个报价最高的竞拍者，而没有其他竞拍者愿意再报更高的价格。然后，拍卖师宣布拍卖结束，最高竞价者被宣布为成功买家，价格等于他们的最高出价。

从未获胜的竞拍者的角度来看，这种方法有一些缺点。在拍卖过程中，他们需要透露他们愿意支付的最高价格。其他想要销售类似物品的卖家可以利用这一事实，拒绝以低于这个价格的价格出售，剥夺了购买者以更低价格购买的可能性，即使没有其他竞拍者的竞争。如果能以一种不揭示失败竞标者出价的方式确定拍卖的获胜竞标者，那就更好了。在本次作业的第一部分中，我们将开发一种实现这种方式的方法。如果还能隐藏失败竞标者的身份，那就更好了。这将在本次作业的第二部分的一个目标中解决。

通过使用荷兰式拍卖，可以实现隐藏未获胜竞标者的出价。这种拍卖交换了买方和卖方的角色，并通过不断降低价格的方式进行，直到找到愿意以该价格购买的买家为止。也就是说，卖家首先报出高价，并要求买家以该价格购买。如果没有买家表示愿意以该价格购买，卖家将降低价格，并再次要求出价。这个过程重复进行，价格随着时间的推移而下降，直到找到一个买家。

在本次作业中，我们将应用这种方法开发一个智能合约，用于在其中可以购买和出售 ERC-20 代币的市场。在这个智能合约市场中，我们将应用这种方法来购买和出售 ERC-20 代币。与单个商品的销售相比，我们有一些额外的要求。考虑这样一种情况，卖方希望出售相同类型的 N 个 ERC-20 代币。假设有 n ≥ 1 个竞标者，所有竞标者都提供以每个代币的当前卖家价格 p 购买 b1，. . . ，bn 个代币的报价。竞标者 i 可以从该卖家获得 ≤ bi 个代币。当从该卖家获得 x 个代币时，竞标者 i 将以每个代币的价格 p 支付，总成本为 x × p。

• 如果 P i=1...n bi ≤ N，则每个买家 i 应该精确地获得 bi 个代币，剩余的 N − P i=1...n bi 个代币待售。如果卖家愿意，他们可以选择进一步降低价格来出售这些代币。

• 如果 P i=1...n bi > N，则代币的销售存在争议，我们需要一条规则来确定每个买家应该收到多少个代币。我们将采取这样的态度：等待购买时间最长的买家将首先获得订单。为此，我们需要一种确定哪个买家是等待时间最长的方法，而不会过早地透露他们准备支付的价格。我们通过使用盲竞标来解决这个问题。我们最初维护一个计数器 bid-number，其初始值为 0。当买家提交购买订单时，它将被分配当前的 bid-number，并递增 bid-number。竞标本身是盲目的：它不应透露买家准备购买的代币数量，也不应透露他们准备为每个代币支付的价格。当卖家的价格达到买家准备支付的价格时，买家会打开或透露他们的竞标，使代币数量和价格公开。买家不应能够通过透露与他们最初的盲竞标中使用的数字不同的代币数量或价格来作弊。

在提供多个卖家和买家匹配的市场服务背景下，当多个卖家以潜在不同的价格出售相同种类的代币时，也存在类似的问题。发行自同一智能合约的 ERC-20 代币是可以互换的，因此买家不会关心他们收到哪个卖家的代币。在匹配买入订单和卖出报价时，应优先将订单与最低价格的卖出报价匹配。对于相同价格的卖出报价，应该优先使用早期的卖出报价来提供给买家。为了实现这一点，当代币块第一次被提供出售时，它将与一个报价号关联。

请注意，在价格为 p 的卖出报价与价格为 q ≥ p 的买入订单匹配时，买家支付更低的价格 p。买入价格为 q 的订单不应与价格为 p > q 的卖出报价匹配：这样的公开买入订单会留在市场上，以便在后续回合中可能匹配。

例如，假设在某个匹配回合中，我们有以下相同代币类型的卖出报价和公开买入订单：

• 卖家1以每个价格为3个 ETH的价格提供5个代币，带有报价号1。 • 卖家2以每个价格为2个 ETH的价格提供10个代币，带有报价号2。 • 买家3以每个价格为3个 ETH的价格竞标5个代币，带有竞标号1。 • 买家4以每个价格为2个 ETH的价格竞标20个代币，带有竞标号2。

然后：

• 最老的竞标是买家3。他们的竞标与卖家2的价格较低的报价匹配，买家3以每个2个 ETH的价格收到5个代币。这样，卖家2的报价还剩下5个代币。 • 接下来处理买家4的竞标。他们以每个2个 ETH的价格从卖家2的报价中收到5个代币，以每个3个 ETH的价格从卖家1的报价中收到5个代币。也就是说，他们以总费用为 10 + 15 = 25 个 ETH 收到了10个代币。 • 买家4的竞标没有完全填满，因此保留为一个以每个2个 ETH的价格买入10个代币的竞标，除非买家4在下一个竞标开放回合期间选择撤回该报价。



Part 1（25分）

开发一个Solidity语言的DutchMarket智能合约，实现ERC-20代币市场并实现上述想法。具体来说，合约应具备以下功能：

• 买方和卖方应能够在智能合约中创建账户，其中包含一定数量的ETH和不同种类的ERC-20代币。（代币种类由发行代币的智能合约的地址标识。）

• 市场中持有的ERC-20代币应受DutchMarket合约的控制，以防它们被在其他地方出售。

• 买方和卖方应能够从其账户中存取和提取代币和ETH货币。

• 卖方应能够提供在其账户中的一块N个相同种类的代币，以指定的价格出售。

• 卖方应能够降低挂单的价格，但不能增加价格。

• 卖方应能够撤销挂单。

• 买方应能够以盲目出价的方式购买代币。出价规定了购买的代币类型、要购买的代币数量以及最高价格。任何监控区块链的人都不能推断出出价的这些细节。但是，出价人的加密地址可以被揭示（请参见下一节，该节涉及出价人身份的隐藏）。

• 当卖方将价格降低到买方愿意支付的金额时，买方可以通过开放相应的盲目出价来完成交易。这将揭示代币类型、代币数量和最高价格。

• 一旦购买挂单被开放，它就会一直保持开放状态。

• 买方可以撤回开放或关闭的购买挂单。

• 市场按照Deposit/Withdraw，Offer，Bid Opening和Matching的重复模式运行，每个模式的操作限制了参与者在该模式下可以执行的操作。每个模式的执行时间为5分钟，在此之后，市场会转到序列中的下一个模式（匹配后是Deposit/Withdraw）。每个模式中允许的操作如下：

- Deposit/Withdraw：买方和卖方可以从其账户中存入和提取资金。
- Offer：卖方可以提供新的出售挂单，撤回挂单，并降低现有出售挂单的价格。
- Bid Opening：买方可以以盲目出价的方式提出新的购买挂单。买方也可以开放盲目出价。买方还可以撤回开放或盲目出价。
- Matching：根据第1节中描述的优先规则，将出售挂单与购买挂单进行匹配。
- 在Deposit/Withdraw（存款/取款）模式下，买家和卖家可以从他们的账户中存款和取款。
-   在Offer（出价）模式下，卖家可以提供出售同一种类的N个代币，以指定的价格进行出售。 
-  在Offer模式下，卖家可以降低未完成出价的价格，但不可以增加价格。 
- 在Offer模式下，卖家可以撤回出售报价。 
-  在Bid Opening（出价公开）模式下，买家可以提交新的盲出价并进行开盘。买家也可以撤回开放或盲出价。 
- 在Matching（匹配）模式下，未完成的出售报价与已开放的买入盲出价按照第1节中描述的优先规则进行匹配。 
-  对于每个匹配对，应将相应数量的代币k从卖家的账户转移到买家的账户，并将k倍的报价从买家的账户转移到卖家的账户。（该服务不向买家和卖家收取市场费用。） 
-  禁止负账户余额。如果执行匹配会在买家或卖家的账户中产生负余额，则不执行该匹配。尽可能地，市场设计应防止这种不当匹配的可能性。 
-  尽可能地，智能合约的实现应最小化用户（买家和卖家）需要支付的交易的燃气成本。
